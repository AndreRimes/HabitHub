// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todo.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (
    title, term, user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, title, term, completed, created_at, updated_at, user_id
`

type CreateTodoParams struct {
	Title  string `json:"title"`
	Term   string `json:"term"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.Title, arg.Term, arg.UserID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Term,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one
DELETE FROM todo
WHERE id = $1
RETURNING id, title, term, completed, created_at, updated_at, user_id
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, deleteTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Term,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, term, completed, created_at, updated_at, user_id FROM todo
WHERE id = $1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Term,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listTodoByUser = `-- name: ListTodoByUser :many
SELECT id, title, term, completed, created_at, updated_at, user_id FROM todo
WHERE user_id= $1
ORDER BY created_at
`

func (q *Queries) ListTodoByUser(ctx context.Context, userID int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodoByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Term,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleTodo = `-- name: ToggleTodo :one
UPDATE todo
SET completed = NOT completed
WHERE id = $1
RETURNING id, title, term, completed, created_at, updated_at, user_id
`

func (q *Queries) ToggleTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, toggleTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Term,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
