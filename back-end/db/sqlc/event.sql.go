// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: event.sql

package db

import (
	"context"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (
    title, frequency, frequency_extension, begin_time, end_time, user_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, title, frequency, begin_time, end_time, user_id, created_at, updated_at, frequency_extension
`

type CreateEventParams struct {
	Title              string `json:"title"`
	Frequency          string `json:"frequency"`
	FrequencyExtension string `json:"frequency_extension"`
	BeginTime          string `json:"begin_time"`
	EndTime            string `json:"end_time"`
	UserID             int64  `json:"user_id"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Title,
		arg.Frequency,
		arg.FrequencyExtension,
		arg.BeginTime,
		arg.EndTime,
		arg.UserID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Frequency,
		&i.BeginTime,
		&i.EndTime,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FrequencyExtension,
	)
	return i, err
}

const listEventByUser = `-- name: ListEventByUser :many
SELECT id, title, frequency, begin_time, end_time, user_id, created_at, updated_at, frequency_extension FROM event
WHERE user_id= $1
ORDER BY begin_time
`

func (q *Queries) ListEventByUser(ctx context.Context, userID int64) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEventByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Frequency,
			&i.BeginTime,
			&i.EndTime,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FrequencyExtension,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
